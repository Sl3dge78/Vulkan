#version 460
#extension GL_EXT_ray_tracing : require

struct Payload {
    vec3 direct_color;
};

layout(binding = 0, set = 0, rgba8) uniform image2D image;
layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 0, set = 1) uniform Cam { 
	mat4 view;
	mat4 proj;
} cam;

/*
layout(binding = 2, set = 0) uniform CameraMatrices {
    mat4 view;
    mat4 proj;
    mat4 view_inverse;
    mat4 proj_inverse;
    vec3 pos;
    int frame;
} cam;
*/
layout(location = 0) rayPayloadEXT Payload payload;

const float fov = 90.f;
const float half_fov = 45.0f;
const float tan_half_theta = 1.61977519054f;

void main() {
	const float half_width = gl_LaunchSizeEXT.x/2.0;
	const float half_height = gl_LaunchSizeEXT.y/2.0;
	const float dist = half_width / tan_half_theta;

	const vec3 cam_pos = vec3(cam.view[0][3],cam.view[1][3],cam.view[2][3]);
	const mat4 view_inverse = inverse(cam.view);

	vec2 uv = vec2(gl_LaunchIDEXT / gl_LaunchSizeEXT);
	
	vec3 ray_origin = cam_pos;
	vec3 target = normalize(vec3(gl_LaunchIDEXT.x - half_width, -dist , gl_LaunchIDEXT.y - half_height));
	
    vec3 ray_dir = (view_inverse * vec4(target, 1.0)).xyz;

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.00;
    float t_max = 10000;

	traceRayEXT(tlas, ray_flags, 0xFF, 0, 0, 0, ray_origin, t_min, ray_dir, t_max, 0);
	
	vec3 color = payload.direct_color;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}