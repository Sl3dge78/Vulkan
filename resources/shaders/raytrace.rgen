#version 460 core
#extension GL_EXT_ray_tracing : require

#include "shader_utils.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT top_level_AS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraMatrices {
    mat4 view;
    mat4 proj;
    mat4 view_inverse;
    mat4 proj_inverse;
} cam;

layout(location = 0) rayPayloadEXT HitPayload prd;

void main() 
{
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_UV = pixel_center/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_UV * 2.0 - 1.0;

    vec4 origin = cam.view_inverse * vec4(0,0,0,1);
    vec4 target = cam.proj_inverse * vec4(d.x, d.y, 1,1);
    vec4 direction = cam.view_inverse * vec4(normalize(target.xyz), 0);

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    uint mask = 0xff;
    float t_min = 0.001;
    float t_max = 10000.0;

    traceRayEXT(
        top_level_AS,   // Acceleration structure
        ray_flags,      // Ray flags
        mask,           // cull mask
        0,              // sbtRecordOffset
        0,              // sbtRecordStride
        0,              // missIndex
        origin.xyz,     // ray origin
        t_min,          // ray min range
        direction.xyz,  // ray direction
        t_max,          // ray max range
        0               // payload location
    );

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hit_value,1.0));
}
